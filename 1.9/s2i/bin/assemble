#!/bin/bash

set -e

pushd /tmp/src

if [[ `go list -f {{.Incomplete}}` == "true" || ! -z "$IMPORT_URL" ]]; then

    INSTALL_URL=${INSTALL_URL:-$IMPORT_URL}

    if [[ ! -z "$IMPORT_URL" ]]; then

        popd

        echo "Assembling GOPATH"

        export GOPATH=`realpath $HOME/go`
        export PATH=$PATH:$GOPATH/bin
        mkdir -p $GOPATH/src/$IMPORT_URL

        mv /tmp/src/* $GOPATH/src/$IMPORT_URL

        if [[ -d /tmp/artifacts/pkg ]]; then

            echo "Restoring previous build artifacts"

            mv /tmp/artifacts/pkg $GOPATH

        fi

        # Resolve dependencies, ignore if vendor present

        if [[ ! -d $GOPATH/src/$INSTALL_URL/vendor && `go list -f {{.Incomplete}} $INSTALL_URL` == "true" ]]; then

            echo "Resolving dependencies"

            pushd $GOPATH/src/$INSTALL_URL

            if [ -f "./Gopkg.toml" ]
            then
                echo "---> Using golang dep manager (dep is a prototype dependency management tool)"
                echo "---> Downloading golang dep manager from github.com/golang/dep ..."
                go get -u github.com/golang/dep/cmd/dep
                echo "---> Downloading dependencies (running 'dep ensure') ..."
                dep ensure -v
            else
                echo "---> Using 'go get' to download dependencies"
                echo "---> Downloading dependencies..."
                go get -v
            fi
            popd

        fi

        # lets build

        pushd $GOPATH/src/$INSTALL_URL

        echo "Building"

        go install $INSTALL_URL

        mv $GOPATH/bin/* /opt/app-root/gobinary

        popd

        exit

    fi

    exec /$STI_SCRIPTS_PATH/usage

else

    go build -o /opt/app-root/gobinary

    popd

fi
